snippet d
	debugger
snippet f
	function(${1}) {
		${3}
	}${2}
snippet fu
	function ${1}(${2}) {
		${3}
	}
snippet m
	${1}: function(${2}) {
		${3}
	},
snippet clos
	(function() {
		${1}
	})();
snippet r
	return
snippet re
	require('${1}')${2}
snippet pr
	prototype
snippet for
	for (var ${1:i}${2: = 0}, ${3:l}${4: = 10}; $1 < $3; $1++) {
		${5}
	}
snippet fori
	for (${1:var i} in ${2}) {
		${3}
	}
snippet if
	if (${1}) {
		${2}
	}
snippet ife
	if (${1}) {
		${2}
	} else {
	}
snippet switch
	switch (${1}) {
		case ${2}:
			${3}
			break;
	}
snippet cl
	console.log(${1});
snippet cw
	console.warning(${1});${2}
snippet ce
	console.error(${1});${2}
snippet ct
	console.time('${1}');${2}
snippet cte
	console.timeEnd('${1}');${2}
snippet cla
	console.log(arguments);
snippet clv
	console.log('${1:var}: ' + $1);${2}
snippet cln
	console.log("\033[31m");
	console.log(${1});
	console.log("\033[0m");
snippet dmp
	console.log("\033[31m");
	console.log(JSON.stringify(${1}, null, '  '))
	console.log("\033[0m");
snippet clj
	console.log(JSON.stringify(${1}));${2}
snippet uw
	Util.warn('\n\033[31m' + ${1} + '\033[0m');${2}
snippet pd
	e.preventDefault();
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4}
	};
snippet t
	I18n.t('${1:type.key}', { defaultValue: '${2}' })${3}
snippet sett
	setTimeout(function() {
		${2}
	}, ${1:0});
snippet seti
	setInterval(function() {
		${2}
	}, ${1:0});
snippet wh
	while (${1}) {
		${2}
	}
snippet gebi
	document.getElementById('${1}')${2}
snippet gebc
	document.getElementsByClassName('${1}')${2:[0]}
snippet gebt
	document.getElementsByTagName('${1}')${2:[0]}
snippet gebn
	document.getElementsByName('${1}')${2:[0]}
snippet try
	try {
		${1}
	} catch (e) {
		// error
	}

snippet get
	get('${1}')${2}
snippet has
	hasOwnProperty(${1})
snippet set
	set({ '${1}': '${2}' })${3}
snippet ext
	_.extend(${1}, ${2})
snippet keys
	Object.keys(${1})${2}
snippet each
	forEach(function(${1:v}) {
		${2}
	})
snippet map
	map(function(${1:v}) {
		return ${2};
	})
snippet euc
	encodeURIComponent(${1})${2}
snippet duc
	decodeURIComponent(${1})${2}
snippet timer
	var date = new Date
	${1}
	new Date - date
snippet js
	JSON.stringify(${1}, null, '  ')
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
snippet blocks
	blocks['${1}']${2}
snippet bblocks
	BEM.blocks['${1}']${2}
snippet block
	block: '${1}',${2}
snippet elem
	elem: '${1}',${2}
snippet mod
	mod: { ${1}: '${2}' },${3}
snippet exp
	data.experiments['${1}']${2}
snippet expr
	data.rdat.cgi().p('test-id') == ${1}
snippet base
	this.__base.apply(this, arguments);
snippet fb
	findBlock
snippet findBlocki
	findBlockInside('${1}')${2}
snippet findBlocko
	findBlockOutside('${1}')${2}
snippet ace
	afterCurrentEvent(${1})${2}
snippet osm
	onSetMod: {
		${1}: function() {
			${2}
		}
	}
snippet sel
	{ name: '${1}', modName: '${2}', modVal: '${3}' }${4}
snippet decl
	BEM.DOM.decl(`Snippet_BEMBlockFromFilename()`, {

		onSetMod: {

			js: {
				inited: function() {
					${1}
				}
			}

		}

	});
snippet should
	({
		shouldDeps: ${1}
	})
snippet logger
	logger = $('<ul>').css({
		'position': 'absolute',
		'top': 0,
		'right': 0,
		'z-index': 9999,
		'background-color': '#fff'
	}).appendTo($('body'))
	function log(s) {
		logger.append('<li>' + s + '</li>')
	};
snippet pcss
	data.pushCSSJS({ name: '${1:wiz}', elem: 'css', url: data.config.staticHost + 'bundles/$1/$1.less.css' });${2}
snippet pjs
	data.pushCSSJS({ name: '${1:wiz}', elem: 'js', url: data.config.staticHost + 'bundles/$1/_$1.js' });${2}
snippet package
	{
		"name": "${1}",
		"version": "${2:0.0.1}",
		"repository": {
			"type": "git",
			"url": "git://github.com/${3}.git"
		},
		"engines": {
			"node": "0.8 | 0.9 | 0.10"
		},
		"dependencies": {
			${4}
		},
		"devDependencies": {},
		"private": true
	}
snippet tech
	require('enb/techs/${1}')${2}
snippet techs
	[require('enb/techs/${1}'), { ${2} }]${3}
snippet xhr
	var xhr = new XMLHttpRequest();
	xhr.open('GET', '${1}', true);
	xhr.onreadystatechange = function() {
		if (xhr.readyState == 4)
			console.log(xhr);
		callback(xhr.responseText, xhr.status);
	}
	xhr.send();
snippet jshint
	/* jshint ${1:indent}: false */
	
snippet dbt
	([
		{
			tech: 'js',
			mustDeps: [
				{
					block: '${1}',
					tech: 'bemhtml'
				}
			]
		},
		{
			${2}
		}
	])
snippet server
	var express = require('express')
		fs = require('fs'),
		app = express();

	app.get('/', function(req, res) {
		// res.redirect('404')
		// res.send(fs.readFileSync('main.js'));
		// var result = JSON.stringify({ success: true, result: 42 });
		// if (req.query.callback)
		//     res.send(req.query.callback + '(' + result + ')');
		// else
		//     res.send(result);
		res.set('Content-Type', 'text/html');
		res.send(fs.readFileSync('qwe.html'));
	});
	app.listen(3000);
snippet *
	/**
	 * ${1}
	 */
