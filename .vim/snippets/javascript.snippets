snippet fu
    function ${1}(${2}) {
        ${3}
    }
snippet clos
    (function() {
        ${1}
    })();
snippet r
    return

snippet re
options word
    require('${1}')${2}

snippet for
options head
  for (var ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
    ${0:TARGET}
  }

snippet fori
options head
  for (var ${1:i} in ${2:#:Things}) {
    ${0:TARGET}
  }

snippet if
    if (${1}) {
        ${2}
    }
snippet ife
    if (${1}) {
        ${2}
    } else {
    }
snippet switch
    switch (${1}) {
        case ${2}:
            ${3}
            break;
    }
snippet cl
    console.log(${1});
snippet ct
    console.time('a');
    ${1}
    console.timeEnd('a');
snippet cla
    console.log(arguments);
snippet clv
    console.log('${1:var}: ' + $1);${2}
snippet cln
    console.log("\033[31m");
    console.log(${1});
    console.log("\033[0m");
snippet dmp
    console.log("\033[31m");
    console.log(JSON.stringify(${1}, null, '  '))
    console.log("\033[0m");
snippet pd
    e.preventDefault();
snippet proto
    ${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
        ${4}
    };
snippet sett
    setTimeout(function() {
        ${2}
    }, ${1:0});
snippet seti
    setInterval(function() {
        ${2}
    }, ${1:0});
snippet wh
    while (${1}) {
        ${2}
    }
snippet gebi
    document.getElementById('${1}')${2}
snippet gebc
    document.getElementsByClassName('${1}')${2:[0]}
snippet gebt
    document.getElementsByTagName('${1}')${2:[0]}
snippet gebn
    document.getElementsByName('${1}')${2:[0]}
snippet try
    try {
        ${1}
    } catch (e) {
        // error
    }

snippet get
    get('${1}')${2}
snippet has
    hasOwnProperty(${1})
snippet set
    set({ '${1}': '${2}' })${3}
snippet ext
    _.assign(${1}, ${2})
snippet keys
    Object.keys(${1})${2}
snippet each
    forEach(function(${1:v}) {
        ${2}
    })
snippet map
    map(function(${1:v}) {
        return ${2};
    })

snippet euc
options word
    encodeURIComponent(${1})

snippet duc
options word
    decodeURIComponent(${1})

snippet timer
    var date = new Date
    ${1}
    new Date - date
snippet @par
    @param {${1:type}} ${2:name} - ${3:description}
snippet @ret
    @return {${1:type}} ${2:description}
snippet logger
    logger = $('<ul>').css({
        'position': 'absolute',
        'top': 0,
        'right': 0,
        'z-index': 9999,
        'background-color': '#fff'
    }).appendTo($('body'))
    function log(s) {
        logger.append('<li>' + s + '</li>')
    };
snippet package
    {
        "name": "${1}",
        "version": "${2:0.0.1}",
        "repository": {
            "type": "git",
            "url": "git://github.com/${3}.git"
        },
        "engines": {
            "node": "0.8 | 0.9 | 0.10"
        },
        "dependencies": {
            ${4}
        },
        "devDependencies": {},
        "private": true
    }
snippet xhr
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '${1}', true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4)
            console.log(xhr);
        callback(xhr.responseText, xhr.status);
    }
    xhr.send();

snippet jshint
    /* jshint ${1:indent}: false */

snippet jscs
    /* jscs: disable ${1}*/

snippet server
    var express = require('express')
        fs = require('fs'),
        app = express();

    app.get('/', function(req, res) {
        // res.redirect('404')
        // res.send(fs.readFileSync('main.js'));
        // var result = JSON.stringify({ success: true, result: 42 });
        // if (req.query.callback)
        //     res.send(req.query.callback + '(' + result + ')');
        // else
        //     res.send(result);
        res.set('Content-Type', 'text/html');
        res.send(fs.readFileSync('qwe.html'));
    });
    app.listen(3000);
snippet desc
    describe('${1}', function() {
        ${2}
    });
snippet it
    it('should ${1}', function() {
        ${2}
    });
snippet color
    console.log(Array(3).join('\n'));
    console.log('\033[3' + new Date % 6 + 'm');
snippet ael
    addEventListener('${1}', function(e) {
        ${2}
    });
snippet read
    fs.readFileSync('${1}');
snippet ex
    module.exports = function(${1}) {
        ${2}
    };
snippet h1
    '<h1>test</h1>'

snippet f
options word
    function(${1}) {
        ${3}
    }${2}

snippet qs
options head
    document.querySelector('${1}')${2}

snippet js
options word
    JSON.stringify(${1}, null, '  ')

snippet clj
options head
    console.log(JSON.stringify(${1}, null, '  '));${2}

snippet promise
options word
    new Promise(function(resolve, reject) {
        ${1}
    });

snippet vowpromise
options word
    new vow.Promise(function(resolve, reject, notify) {
        ${1}
    });

snippet *
options head
    /**
     * ${1}
     */

snippet def
options head
    define(function(require, exports, module) {
        'use strict';

        // @ngInject
        exports.${1} = function() {
        };
    });

snippet spec
options head
    /* global angular, inject */

    describe('Main Controller', function() {
        'use strict';

        var
            ctrl,
            scope;

        angular.module('mainControllerTest', [require('core').name])
            .controller(require('./controllers'));

        beforeEach(function() {
            angular.mock.module('mainControllerTest');
        });

        beforeEach(inject(function($controller, $rootScope) {
            scope = $rootScope.$new();
            ctrl = $controller('MainCtrl', {
                $scope: scope
            });
        }));

        it('should be an object', function() {
            expect(ctrl).toBeObject();
        });

    });
